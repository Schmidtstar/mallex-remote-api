## MALLEX – Replit Agent Base Prompt (statisch, sicher)

**Ziel:** Dauerhafte Arbeitsregeln. Der Agent arbeitet ausschließlich **statisch am Code**, führt **keine** Shell-, Build- oder Runtime-Befehle aus.

### Grundprinzipien
1. **Projekt erhalten:** Bestehende, funktionierende Basis darf nicht zerstört werden. Keine umfassenden Rewrites.
2. **Nur statische Code-Arbeit:** Keine Shell-Cmds (kein `npm install`, `npm run dev`, `vite build`). Nötige Befehle nur als Hinweis im Report dokumentieren.
3. **Kleine, gezielte Deltas:** Jede Änderung muss im **Delta** beauftragt sein.
4. **Dokumentation:** Nach jeder Änderung ein **kurzer Markdown-Report** (siehe Workflow).

### Safety-Gates
- **File-Touch-Policy:** Es dürfen **nur** Dateien geändert werden, die im Delta unter **Geänderte Dateien** gelistet sind. Keine weiteren Dateien editieren.
- **No-Refactor-Rule:** Keine breitflächigen Formatierungen/Refactors außerhalb des Deltas. Keine Imports/Dateien verschieben.
- **ENV-Konvention:** Es existiert `VITE_HASH_ROUTER` (`"true"`/`"false"`). Keine neuen ENV-Variablen anlegen, außer im Delta genehmigt.
- **Placeholder-Policy:** Wörtliche `...` im Code sind unzulässig. Entweder minimalen, lauffähigen Stub einsetzen **oder** die betroffene Nutzung (Import/Route) temporär auskommentieren – **immer** die Variante mit **weniger Impact**.
- **Reporting-Pflicht:** Am Ende immer ein kurzer Report (Dateiliste, Änderungen, Code-Snippets vorher/nachher, manuelle Tests).

### Erlaubte Analyse & Änderungen
- Konsistenzprüfung ENV & Router-Modus (`VITE_HASH_ROUTER`).
- Minimaler Router-Toggle in `router.tsx` (nur wenn im Delta beauftragt).
- Frühzeitige ENV-Validierung (`assertEnv`) – nur wenn im Delta beauftragt.
- Entfernen eindeutig ungenutzter Importe in **den im Delta genannten Dateien**.
- Kleine UI-Stubs (minimal, um Build-Fehler zu vermeiden) gemäß Delta.
- Kommentare/Docstrings zur Verständlichkeit.

### Nicht erlaubt
- Keine Package-Änderungen (kein `package.json`) ohne Delta-Freigabe.
- Kein Hinzufügen von Backend/Server-Komponenten.
- Keine Build-/Runtime-Konfig-Änderungen ohne Delta.
- Keine Löschung generierter Ordner (z. B. `dist/`) ohne Delta.

### Workflow
1. **Delta lesen** (vom Nutzer).
2. **Analyse** der genannten Dateien.
3. **Gezielte Änderungen** nur in **Geänderte Dateien** durchführen.
4. **Markdown-Report** erstellen:
   - Geänderte Dateien (Pfadliste)
   - Kurzbeschreibung je Datei
   - Vorher/Nachher-Snippets (relevante Ausschnitte)
   - **Manuelle Mini-Tests** (Schritte, die der Nutzer klicken/prüfen soll)

### Delta-Template (vom Nutzer)
**Delta-ID:** `YYYYMMDD-XX`  
**Ziel:** *[Kurzbeschreibung]*  
**Geänderte Dateien:**  
- `...`  
**Details / Anforderungen:**  
- *Punkt 1*  
- *Punkt 2*  
**Akzeptanzkriterien:**  
- [ ] *Kriterium 1*  
- [ ] *Kriterium 2*  
**Zusatzhinweise:**  
- *Pfade/Variablen/UI-Texte…*