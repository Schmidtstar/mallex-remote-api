
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* Helpers */
    function signedIn() { return request.auth != null; }
    function owner(uid) { return signedIn() && request.auth.uid == uid; }
    function admin() {
      return signedIn() &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /* Admin-Whitelist (UID-based) */
    match /admins/{uid} {
      allow read: if (signedIn() && request.auth.uid == uid) || admin();
      allow write: if false;
    }

    /* Nutzerprofil */
    match /users/{uid} {
      allow read, create, update: if owner(uid) || admin();
    }

    /* Spielerverwaltung (Legenden – Top-Level) */
    match /players/{playerId} {
      // Lesen: alle eingeloggten User (für Rangliste/Leaderboard)
      allow read: if signedIn();

      // Erstellen: Besitzer = eingeloggter User, Name verpflichtend und begrenzt
      allow create: if signedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 40;

      // Aktualisieren: nur Besitzer + Ownership darf sich nicht ändern
      allow update: if signedIn()
        && request.auth.uid == resource.data.userId
        && (!('userId' in request.resource.data)
            || request.resource.data.userId == resource.data.userId)
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 40;

      // Löschen: nur Besitzer
      allow delete: if signedIn() && request.auth.uid == resource.data.userId;
    }

    /* Vorschläge der Nutzer (Moderation durch Admins) */
    match /suggestions/{sid} {
      allow create: if signedIn()
        && request.resource.data.category in [
          'schicksal','schande','verfuehrung','eskalation','beichte',
          'fate','shame','seduce','escalate','confess'
        ]
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 500
        && request.resource.data.createdBy == request.auth.uid;

      allow read: if admin() || (signedIn() && resource.data.createdBy == request.auth.uid);
      allow update, delete: if admin();
    }

    /* Globale Aufgaben (Task-Pool) */
    match /tasks/{tid} {
      allow read: if signedIn();
      allow create, update, delete: if admin()
        && request.resource.data.category in [
          'schicksal','schande','verfuehrung','eskalation','beichte',
          'fate','shame','seduce','escalate','confess'
        ]
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 500;
    }

    // Admin access to all taskSuggestions
    match /taskSuggestions/{suggestionId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /* Admin Settings */
    match /adminSettings/{settingId} {
      allow read, write: if admin();
    }

    /* Notifications (für System-Benachrichtigungen) */
    match /notifications/{notificationId} {
      allow read, write: if admin() || (signedIn() && resource.data.userId == request.auth.uid);
    }

    /* Alles andere verboten */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
