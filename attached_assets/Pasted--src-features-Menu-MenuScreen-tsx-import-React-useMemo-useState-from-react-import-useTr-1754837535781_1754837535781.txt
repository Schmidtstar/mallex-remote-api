// src/features/Menu/MenuScreen.tsx
import React, { useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { categories as categoriesMap } from '../Arena/categories';
import { challenges } from '../Arena/challenges';

export default function MenuScreen() {
  const { t } = useTranslation();

  // Turn categories object into an array: [{ id: 'fate', labelKey: 'categories.fate' }, ...]
  const categoryList = useMemo(
    () =>
      Object.entries(categoriesMap).map(([id, labelKey]) => ({
        id,
        labelKey: String(labelKey),
      })),
    []
  );

  const [selectedCategoryKey, setSelectedCategoryKey] = useState<string>(
    categoryList[0]?.id ?? ''
  );

  const tasks: string[] = challenges[selectedCategoryKey] ?? [];

  return (
    <div style={{ padding: '16px', display: 'grid', gap: 16 }}>
      {/* Category selector */}
      <div
        style={{
          display: 'flex',
          gap: 8,
          flexWrap: 'wrap',
          alignItems: 'center',
        }}
      >
        {categoryList.map((category) => {
          const isActive = selectedCategoryKey === category.id;
          const count = (challenges[category.id] ?? []).length;

          return (
            <button
              key={category.id}
              onClick={() => setSelectedCategoryKey(category.id)}
              style={{
                padding: '10px 14px',
                backgroundColor: isActive ? '#4CAF50' : 'rgba(255,255,255,0.18)',
                color: '#fff',
                border: isActive
                  ? '2px solid #4CAF50'
                  : '2px solid rgba(255,255,255,0.28)',
                borderRadius: 24,
                cursor: 'pointer',
                fontSize: 14,
                fontWeight: isActive ? 700 : 500,
                backdropFilter: 'blur(8px)',
                display: 'flex',
                alignItems: 'center',
                gap: 8,
                transition: 'all .2s ease',
              }}
            >
              <span>{t(category.labelKey) || category.labelKey}</span>
              <span
                style={{
                  backgroundColor: isActive
                    ? 'rgba(255,255,255,0.3)'
                    : 'rgba(255,255,255,0.35)',
                  padding: '2px 6px',
                  borderRadius: 12,
                  fontSize: 12,
                  fontWeight: 700,
                }}
              >
                {count}
              </span>
            </button>
          );
        })}
      </div>

      {/* Tasks list for active category */}
      <div
        style={{
          backgroundColor: 'rgba(255,255,255,0.1)',
          borderRadius: 12,
          padding: 16,
          backdropFilter: 'blur(8px)',
          border: '1px solid rgba(255,255,255,0.18)',
        }}
      >
        <h3 style={{ margin: '0 0 12px 0' }}>
          {t(categoriesMap[selectedCategoryKey] || '') ||
            selectedCategoryKey ||
            'â€”'}
        </h3>

        {tasks.length === 0 ? (
          <div style={{ opacity: 0.8 }}>{t('menu.noTasks') || 'No tasks'}</div>
        ) : (
          <ul style={{ margin: 0, paddingLeft: 18, display: 'grid', gap: 8 }}>
            {tasks.map((key) => (
              <li key={key} style={{ lineHeight: 1.4 }}>
                {t(key) || key}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}