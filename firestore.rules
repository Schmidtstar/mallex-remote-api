rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function: Check if user is admin (UID-based)
    function admin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Helper function: Check if user is signed in
    function signedIn() {
      return request.auth != null;
    }

    // Players collection - users can manage their own players
    match /players/{playerId} {
      allow read, write: if signedIn() && request.auth.uid == resource.data.userId;
      allow create: if signedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Admin-only collection  
    match /admins/{adminId} {
      allow read, write: if false; // Only backend can manage admins
    }

    // Suggestions collection
    match /suggestions/{suggestionId} {
      // Read: Admin can read all, users can read only their own
      allow read: if admin() || (signedIn() && resource.data.createdBy == request.auth.uid);

      // Create: Signed-in users can create with valid categories
      allow create: if signedIn()
        && request.auth.uid == request.resource.data.createdBy
        && request.resource.data.category in ['schicksal', 'schande', 'verfuehrung', 'eskalation', 'beichte']
        && request.resource.data.status == 'pending';

      // Update/Delete: Only admins (for moderation)
      allow update, delete: if admin();
    }

    // Tasks collection
    match /tasks/{taskId} {
      // Read: Everyone can read tasks
      allow read: if true;

      // Create/Update/Delete: Only admins
      allow create, update, delete: if admin();
    }

    // Users collection
    match /users/{userId} {
      // Read/Write: Only the user themselves
      allow read, write: if signedIn() && request.auth.uid == userId;
    }

    // Default: Deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}