## agent_admin_create_task.md

### Delta-ID
admin-create-task-firestore-integration

### Ziel
Im **Adminbereich** einen Punkt **„Aufgabe erstellen“** hinzufügen.  
Admins können:
1) Kategorie wählen → 2) Aufgabentext eingeben → 3) **Freigeben**.  
Die Aufgabe landet danach **für alle Nutzer im globalen Aufgaben-Pool** und ist in **Arena** und **Aufgaben-Übersicht** sichtbar.

---

## Datenmodell (Firestore)

Neue Collection: `tasks`

```ts
// Collection: tasks
{
  id: string,            // Firestore-Dokument-ID
  category: 'fate' | 'shame' | 'seduce' | 'escalate' | 'confess',
  text: string,          // eigentliche Aufgabe (i18n-neutral, reiner Text)
  status: 'approved',    // (jetzt direkt 'approved', da vom Admin angelegt)
  createdBy: string,     // uid oder email des Admins
  createdAt: Timestamp,  // serverTimestamp()
  hidden?: boolean       // optional: ausblendbar
}
```

Bestehende Collection (falls vorhanden): `suggestions`
- bleibt unverändert (User-Vorschläge → Admin prüft → bei Freigabe **kopieren**/schreiben nach `tasks`, `status='approved'`).

---

## UI/Flows

### A) Admin: „Aufgabe erstellen“
- **Ort:** `AdminTasksScreen` (oder untergeordnetes Tab „Erstellen“)
- **Form:**
  - Select: Kategorie (aus `src/features/Arena/categories.ts`)
  - TextArea: Aufgabentext (Pflichtfeld, min. 5 Zeichen)
  - Button: „Freigeben“
- **Aktion:** `addTask({ category, text })` → Firestore: `tasks/…` mit `status='approved'`.

### B) Arena & Aufgaben-Übersicht (Anzeige)
- Beim Lesen der Aufgaben **statisch + Firestore** mergen:
  - Bestehende statische Aufgaben (aus `challenges.ts`/i18n) **PLUS** approved/visible Einträge aus `tasks`.
  - Filtern: `status==='approved' && hidden!==true`.
- Falls Merging heute schon vorhanden ist: nur Firestore-Layer ergänzen.

---

## Files – Änderungen

1. **Neue Utility/Service**
   - `src/lib/tasksApi.ts`
     ```ts
     import { db } from '@/lib/firebase';
     import { addDoc, collection, serverTimestamp, query, where, getDocs } from 'firebase/firestore';

     export type TaskDoc = {
       category: 'fate'|'shame'|'seduce'|'escalate'|'confess';
       text: string;
       status: 'approved'|'pending'|'rejected';
       createdBy?: string;
       createdAt?: any;
       hidden?: boolean;
     };

     export async function createTaskApproved(input: Pick<TaskDoc,'category'|'text'>, createdBy?: string) {
       return addDoc(collection(db, 'tasks'), {
         ...input,
         status: 'approved',
         createdBy: createdBy ?? null,
         createdAt: serverTimestamp(),
         hidden: false,
       });
     }

     export async function fetchApprovedTasksByCategory(cat: TaskDoc['category']) {
       const q = query(collection(db, 'tasks'),
         where('category','==',cat),
         where('status','==','approved'),
         where('hidden','!=',true) // optional
       );
       const snap = await getDocs(q);
       return snap.docs.map(d => ({ id: d.id, ...(d.data() as TaskDoc) }));
     }
     ```
   - (Optional) `fetchAllApprovedTasks()` für Merging in der Übersicht.

2. **Admin Screen**
   - `src/features/Tasks/AdminTasksScreen.tsx`
     - Neues **Tab „Erstellen“** oder **Card „Aufgabe erstellen“** hinzufügen.
     - Formular + Submit-Handler:
       ```tsx
       const { user } = useAuth(); // für createdBy
       const [cat, setCat] = useState<'fate'|'shame'|'seduce'|'escalate'|'confess'>('fate');
       const [text, setText] = useState('');

       async function onCreate() {
         if (text.trim().length < 5) return setError('Bitte eine aussagekräftige Aufgabe eingeben.');
         await createTaskApproved({ category: cat, text }, user?.email ?? user?.uid);
         setText('');
         toast('Aufgabe freigegeben und zum Pool hinzugefügt');
       }
       ```
     - UI wie deine neuen Karten (gleicher Glas-Stil).

3. **Aufgaben-Übersicht Screen**
   - `src/features/Tasks/TasksScreen.tsx` (oder `Menu/TasksTab.tsx`)
     - Beim Laden:
       - lokale (statische) Aufgaben laden (wie bisher).
       - zusätzlich `fetchApprovedTasksByCategory(selectedCat)` aufrufen.
       - **Mergen**: statische Liste **concat** Firestore-Liste.
     - Zähler (Badge) entsprechend beider Quellen.

4. **Arena**
   - Im Codepfad, der zufällige Aufgabe zieht:
     - Source → `staticTasksFor(cat) + firestoreApprovedFor(cat)` mergen.
     - Dann erst zufällig wählen.
   - Achte darauf, dass i18n-Keys (statisch) und Firestore-Texte (plain) sauber gerendert werden (kein `t(key)` bei Firestore-Texten).

5. **i18n**
   - Keine neuen Keys nötig (Texte der Admin-Tasks sind plain).
   - Labels für „Aufgabe erstellen“ in `de.json/en.json`:
     ```json
     "menu": { "adminCreate": "Aufgabe erstellen" },
     "tasks": {
       "create": { "title": "Aufgabe erstellen", "submit": "Freigeben", "placeholder": "Formuliere die Aufgabe..." }
     }
     ```

6. **Routing**
   - Wenn Admin-Screen Tabs nutzt:
     - Route `#/admin/tasks?tab=create` (optional)
     - Menüeintrag „Admin Aufgaben“ bleibt admin-gated.

---

## Firestore Rules (Ergänzung)

> Hinweis: Du erkennst Admins bereits per E-Mail in der `admins`-Collection.

```rules
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    match /admins/{doc} {
      allow read: if request.auth != null;
    }

    match /tasks/{taskId} {
      // Lesen: alle eingeloggten Nutzer (approved & not hidden wird im Client gefiltert)
      allow read: if request.auth != null;

      // Schreiben: nur Admins (per E-Mail in admins)
      allow create, update, delete: if isAdmin();
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
      // oder: query-basiert via map-Dokumente – wähle die Variante, die du bereits nutzt
    }
  }
}
```

*(Passe die `isAdmin()`-Logik an deine bestehende E-Mail-Prüfung an – Hauptsache: nur Admins dürfen schreiben.)*

---

## Akzeptanzkriterien

- [ ] Im Adminbereich gibt es **„Aufgabe erstellen“** mit Kategorie-Select & Textfeld.
- [ ] „Freigeben“ schreibt einen **approved** Datensatz in `tasks`.
- [ ] **Arena** und **Aufgaben-Übersicht** zeigen neue Admin-Aufgaben zusätzlich zu den statischen Aufgaben an.
- [ ] Nicht-Admins können **nichts** in `tasks` anlegen/ändern/löschen.
- [ ] UI & Styling entsprechen den bisherigen Menü-Karten (Glasmorphismus, Rahmen, Hover/Active).
- [ ] Keine Konsolenfehler; Lade-/Fehlerzustände werden angezeigt.

---

## Tests (manuell)

1) Als **Admin** einloggen → Adminbereich → „Aufgabe erstellen“:  
   - Kategorie „Schicksal“ wählen, Text eingeben → Freigeben  
   - In Firestore erscheint neues `tasks`-Dokument (status=approved).  
   - Aufgabe ist **sofort** in Arena (Kategorie „Schicksal“) & Aufgaben-Übersicht sichtbar.

2) Als **Nicht-Admin** einloggen:  
   - „Aufgabe erstellen“ existiert **nicht**.  
   - Vorschlagen-Flow (User) bleibt unverändert (landet in `suggestions`).

---

