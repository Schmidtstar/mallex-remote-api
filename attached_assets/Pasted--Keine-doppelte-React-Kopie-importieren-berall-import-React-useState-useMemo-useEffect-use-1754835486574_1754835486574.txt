	‚Ä¢	Keine doppelte React-Kopie importieren; √ºberall import React, { useState, useMemo, useEffect, useContext } from 'react' konsistent nutzen (falls ben√∂tigt).
	‚Ä¢	Sicherstellen, dass alle Hooks ausschlie√ülich innerhalb von Function Components oder custom Hooks genutzt werden.

	2.	PlayersContext robust machen

	‚Ä¢	src/context/PlayersContext.tsx:
	‚Ä¢	createContext mit vollst√§ndigem Default-Wert (keine undefined-Zugriffe).
	‚Ä¢	usePlayers() wirft eine klare Fehlermeldung, wenn der Provider fehlt.
	‚Ä¢	Persistenz-Strategie:
	‚Ä¢	Guest (!user || user.isAnonymous): localStorage verwenden; kein Firestore-Zugriff.
	‚Ä¢	Auth: Firestore nutzen; bei Fehlern unsauberer Auth ‚Üí stiller Fallback auf localStorage.
	‚Ä¢	useMemo f√ºr das Context-Value verwenden, um Re-Renders zu reduzieren.

	3.	TabLayout finalisieren (JSX & Styles)

	‚Ä¢	src/layouts/TabLayout.tsx:
	‚Ä¢	Kein Inline-Zugriff wie style={styles.container} (CSS-Module nur via className={styles.container}).
	‚Ä¢	JSX vollst√§ndig schlie√üen (kein h√§ngendes < am Ende).
	‚Ä¢	Legenden-Tab: nur Icon (üèõÔ∏è).
	‚Ä¢	Gast-Badge rechts oben anzeigen, wenn useAuth().isAnonymous === true.

	4.	Halle der Legenden (Spieler-Management)

	‚Ä¢	src/features/Legends/LegendsScreen.tsx:
	‚Ä¢	Spieler hinzuf√ºgen/entfernen √ºber PlayersContext.
	‚Ä¢	Leerer Zustand: klarer CTA ‚ÄûBeschw√∂re die G√∂tter‚Äú (Spieler hinzuf√ºgen).
	‚Ä¢	i18n-Keys verwenden; keine Hardcodes.

	5.	Arena (Random Reveal: Spieler ‚Üí Kategorie ‚Üí Challenge)

	‚Ä¢	src/features/Arena/ArenaScreen.tsx:
	‚Ä¢	Start-Button triggert Sequenz: Spieler ‚Üí Kategorie ‚Üí Aufgabe mit kurzen Animations-Delays.
	‚Ä¢	Wenn keine Spieler: leerer Zustand + Link/CTA zur ‚ÄûHalle der Legenden‚Äú.
	‚Ä¢	{name}-Interpolation im Aufgabe-Text (falls verwendet).
	‚Ä¢	Kein Timer, keine History in der Arena.
	‚Ä¢	i18n-Keys konsequent.

	6.	Router/Fehlerbild verbessern

	‚Ä¢	src/router.tsx:
	‚Ä¢	RouterProvider mit future={{ v7_startTransition: true }} (falls noch nicht gesetzt).
	‚Ä¢	errorElement = globaler ErrorBoundary.

	7.	i18n pr√ºfen

	‚Ä¢	src/i18n/de.json, src/i18n/en.json:
	‚Ä¢	Alle UI-Strings vorhanden (Arena/Legenden/Buttons/Leere-Zust√§nde).
	‚Ä¢	Keine neuen Keys ohne Usage.

Akzeptanzkriterien (muss ‚úîÔ∏è sein)
	‚Ä¢	‚úîÔ∏è Keine ‚ÄûInvalid hook call‚Äú/dispatcher.useContext/styles-Fehler mehr.
	‚Ä¢	‚úîÔ∏è Arena: Start-Sequenz funktioniert (Spieler ‚Üí Kategorie ‚Üí Aufgabe) und bricht sinnvoll ab, wenn keine Spieler vorhanden sind (CTA zur Halle der Legenden).
	‚Ä¢	‚úîÔ∏è Halle der Legenden: Spieler lassen sich persistiert hinzuf√ºgen/entfernen (Guest: localStorage; Auth: Firestore, mit Fail-Fallback).
	‚Ä¢	‚úîÔ∏è Tabs: ‚ÄûHalle der Legenden‚Äú zeigt nur das Icon; Gast-Badge sichtbar bei Anonymous.
	‚Ä¢	‚úîÔ∏è Keine Hardcoded UI-Strings (i18n).
	‚Ä¢	‚úîÔ∏è Keine neuen Paket-/Build-√Ñnderungen; nur Code.

Wichtige Regeln
	‚Ä¢	‚ùå Keine Shell/Build/Runtime-Befehle ausf√ºhren.
	‚Ä¢	‚ùå Keine package.json-√Ñnderungen.
	‚Ä¢	‚úÖ Nach jedem Fix kurzen MD-Report posten: ge√§nderte Datei(en) + 1 Satz Begr√ºndung.

Hinweise f√ºr den manuellen Test (f√ºhrt der Nutzer aus)
	1.	Gast-Flow: App starten ‚Üí /auth ‚Üí ‚ÄûAls Gast fortfahren‚Äú ‚Üí /menu zeigt Badge ‚ÄûGast‚Äú ‚Üí ‚ÄûHalle der Legenden‚Äú ‚Üí Spieler hinzuf√ºgen ‚Üí zur√ºck zur Arena ‚Üí Start ‚Üí Sequenz l√§uft.
	2.	Leerer Zustand: Alle Spieler l√∂schen ‚Üí Arena √∂ffnen ‚Üí CTA zur Halle der Legenden sichtbar.
	3.	i18n: Sprache DE/EN wechseln ‚Üí Tabs, Buttons, Leere-Zust√§nde √ºbersetzt.