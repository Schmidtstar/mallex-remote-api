rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========= HELPERS =========
    function isAdmin() {
      // Wenn du Custom Claims nutzt: return request.auth.token.admin == true;
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function validateUserData() {
      let d = request.resource.data;
      return d.keys().hasAll(['displayName','createdAt']) &&
             d.displayName is string && d.displayName.size() > 0 && d.displayName.size() <= 50 &&
             d.createdAt is timestamp;
    }

    function validatePlayerData() {
      let d = request.resource.data;
      return d.keys().hasAll(['name','score','arenaPoints','ownerId']) &&
             d.name is string && d.name.size() > 0 && d.name.size() <= 30 &&
             d.score is number && d.score >= 0 &&
             d.arenaPoints is number && d.arenaPoints >= 0 &&
             d.ownerId is string;
    }

    function validateTaskSuggestion() {
      let d = request.resource.data;
      return d.keys().hasAll(['title','category','createdBy','createdAt']) &&
             d.title is string && d.title.size() > 5 && d.title.size() <= 200 &&
             d.category in ['Trinken','Action','Wahrheit','Pflicht','Krass'] &&
             d.createdBy is string &&
             d.createdAt is timestamp &&
             (!d.keys().hasAny(['status']) || d.status in ['pending','approved','rejected']);
    }

    function validateArenaSession() {
      let d = request.resource.data;
      // Falls participants als MAP: { uid: true }
      return d.keys().hasAll(['participants','createdBy','createdAt']) &&
             d.participants is map &&
             d.participants.size() >= 1 && d.participants.size() <= 20 &&
             d.createdBy is string &&
             d.createdAt is timestamp;
    }

    // ========= USERS =========
    match /users/{userId} {
      // Lesen: nur Eigentümer oder Admin
      allow read: if request.auth != null &&
                  (request.auth.uid == userId || isAdmin());

      // Erstellen: nur für sich selbst + Validierung + feste Immutables
      allow create: if request.auth != null &&
                    request.auth.uid == userId &&
                    validateUserData();

      // Update: nur Eigentümer oder Admin; Immutables unverändert (createdAt)
      allow update: if request.auth != null &&
                    (request.auth.uid == userId || isAdmin()) &&
                    validateUserData() &&
                    request.resource.data.createdAt == resource.data.createdAt;

      // Löschen: Eigentümer oder Admin
      allow delete: if request.auth != null &&
                    (request.auth.uid == userId || isAdmin());

      // Subcollections: an Eigentum knüpfen
      match /{subcollection}/{docId} {
        allow read, create, update, delete: if request.auth != null &&
                                            (request.auth.uid == userId || isAdmin());
      }
    }

    // ========= PLAYERS =========
    match /players/{playerId} {
      // Lesen: alle authentifizierten
      allow read: if request.auth != null;

      // Erstellen: nur wenn ownerId == uid + Validierung
      allow create: if request.auth != null &&
                    request.resource.data.ownerId == request.auth.uid &&
                    validatePlayerData();

      // Update: nur Besitzer oder Admin; ownerId bleibt unverändert
      allow update: if request.auth != null &&
                    (resource.data.ownerId == request.auth.uid || isAdmin()) &&
                    validatePlayerData() &&
                    request.resource.data.ownerId == resource.data.ownerId;

      // Löschen: nur Besitzer oder Admin
      allow delete: if request.auth != null &&
                    (resource.data.ownerId == request.auth.uid || isAdmin());
    }

    // ========= TASK SUGGESTIONS =========
    match /taskSuggestions/{suggestionId} {
      // Lesen: eigener Datensatz, oder approved, oder Admin
      allow read: if request.auth != null && (
        (resource.data.createdBy == request.auth.uid) ||
        (resource.data.status == 'approved') ||
        isAdmin()
      );

      // Erstellen
      allow create: if request.auth != null &&
                    request.resource.data.createdBy == request.auth.uid &&
                    validateTaskSuggestion();

      // Update: nur Ersteller oder Admin; createdBy/createdAt unverändert
      allow update: if request.auth != null &&
                    (resource.data.createdBy == request.auth.uid || isAdmin()) &&
                    validateTaskSuggestion() &&
                    request.resource.data.createdBy == resource.data.createdBy &&
                    request.resource.data.createdAt == resource.data.createdAt;

      // Löschen: nur Admin
      allow delete: if isAdmin();
    }

    // ========= ADMIN =========
    match /adminSettings/{document} {
      allow read, write: if isAdmin();
    }

    match /systemSettings/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // ========= ACHIEVEMENTS =========
    match /achievements/{achievementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /userAchievements/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;

      // Schreiben: nur Admin (falls Server-Job/Admin setzt)
      allow create, update, delete: if isAdmin();

      match /earned/{achievementId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create, update, delete: if isAdmin();
      }
    }

    // ========= ARENA SESSIONS =========
    match /arenaSessions/{sessionId} {
      // participants als MAP prüfen: participants[uid] == true
      allow read: if request.auth != null && (
        (resource.data.participants[request.auth.uid] == true) ||
        isAdmin()
      );

      // Erstellen: Ersteller == uid + Validierung
      allow create: if request.auth != null &&
                    request.resource.data.createdBy == request.auth.uid &&
                    validateArenaSession();

      // Update: nur Ersteller/Admin; createdBy unverändert
      allow update: if request.auth != null &&
                    (resource.data.createdBy == request.auth.uid || isAdmin()) &&
                    validateArenaSession() &&
                    request.resource.data.createdBy == resource.data.createdBy;

      // Löschen: Ersteller/Admin
      allow delete: if request.auth != null &&
                    (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // --- KEIN globales catch-all allow ---
  }
}